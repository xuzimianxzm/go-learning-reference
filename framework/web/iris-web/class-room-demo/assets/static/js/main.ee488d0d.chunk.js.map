{"version":3,"sources":["tools/url.js","logo.svg","serviceWorker.js","component/Message/index.js","component/MsgContent/index.js","component/SendBox/index.js","component/SigninOrSignup/index.js","SignIn.js","SignUp.js","App.js","index.js"],"names":["status","DevHost","ProHost","Version","Message","User","TokenInfo","Login","GetPre","module","exports","UserURL","TokenInfoURL","LoginURL","MessageURL","Boolean","window","location","hostname","match","prop","className","Moment","unix","this","props","msgInfo","sendTime","format","private","senderName","content","React","Component","MsgContent","componentWillMount","timerId","setInterval","state","logged","Axios","get","Url","headers","Authorization","localStorage","getItem","params","beginTime","subtract","endTime","beginId","lastMsgId","then","res","currLastMsgId","console","log","resMsgList","data","resMsgLen","length","mewMsgList","msgList","forEach","element","push","setState","id","catch","err","response","alert","history","clearTimeout","componentWillUnmount","refs","scrollIntoView","behavior","block","ref","map","item","index","key","SendBox","sendMsg","a","async","receiverName","value","userList","receiverId","username","undefined","post","logout","removeItem","reload","onClick","userInfo","placeholder","Sign","to","PageSignIn","login","passwd","setItem","token","JSON","stringify","type","PageSignUp","register","gender","age","interest","App","isLogged","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee488d0d.chunk.js","sourcesContent":["const status = \"pro\";\n// const status = \"dev\";\nconst DevHost = \"http://localhost:8888\";\nconst ProHost = \"\";\nconst Version = \"/v1\";\nconst Message = \"/message\";\nconst User = \"/user\";\nconst TokenInfo = \"/token/info\";\nconst Login = \"/login\";\n\nfunction GetHost() {\n  return status == \"dev\" ? DevHost : ProHost;\n}\n\nfunction GetPre() {\n  return GetHost() + Version;\n}\nfunction UserURL() {\n  return GetPre() + User;\n}\nfunction MessageURL() {\n  return GetPre() + Message;\n}\nfunction TokenInfoURL() {\n  return GetPre() + TokenInfo;\n}\nfunction LoginURL() {\n  return GetPre() + Login;\n}\n\nmodule.exports = {\n  // Host:\"http://localhost:8888\",\n  // Host: \"\",\n  // Version: \"/v1\",\n  // Message: \"/message\",\n  // User: \"/user\",\n  // TokenInfo: \"/token/info\",\n  // Login: \"/login\",\n  UserURL: UserURL,\n  TokenInfoURL: TokenInfoURL,\n  LoginURL: LoginURL,\n  MessageURL: MessageURL\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport Moment from \"moment\"\nimport \"./index.css\"\nclass Message extends React.Component{\n  constructor(prop){\n    super(prop)\n  }\n\n  render(){\n    return (\n      <div className=\"message\">\n        <div className=\"message-time\">\n          {Moment.unix(this.props.msgInfo.sendTime).format(\"YYYY-MM-DD HH:mm\")}\n        </div>\n        <div className={this.props.msgInfo.private?\"message-sender private\":\"message-sender\"}>\n          {this.props.msgInfo.senderName} :\n        </div>\n        <div className=\"message-content\">\n          <span className=\"message-content-content\">{this.props.msgInfo.content} </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Message","import React from \"react\";\nimport Message from \"../Message\";\nimport Axios from \"axios\";\nimport Moment from \"moment\";\nimport Url from \"../../tools/url\";\nimport \"./index.css\";\nclass MsgContent extends React.Component {\n  constructor(prop) {\n    super(prop);\n    this.state = {\n      logged: false,\n      timerId: 0,\n      lastMsgId: 0,\n      msgList: []\n    };\n  }\n  componentDidUpdate() {\n    this.refs[\"msg-container\"].scrollIntoView({\n      behavior: \"smooth\",\n      block: \"end\"\n    });\n  }\n  componentWillMount = () => {\n    let timerId = setInterval(() => {\n      if (this.state.logged) {\n        Axios.get(`${Url.MessageURL()}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"iris-token\")}`\n          },\n          params: {\n            beginTime: Moment()\n              .subtract(2, \"days\")\n              .format(\"X\"),\n            endTime: 0,\n            beginId: this.state.lastMsgId\n          }\n        })\n          .then(res => {\n            // console.log('获取消息成功 => ',res)\n            let currLastMsgId = this.state.lastMsgId;\n            console.log(\" => \", currLastMsgId);\n            let resMsgList = res.data;\n            let resMsgLen = resMsgList.length;\n            let mewMsgList = [...this.state.msgList];\n            resMsgList.forEach(element => {\n              mewMsgList.push(element);\n            });\n            this.setState({\n              logged: true,\n              msgList: mewMsgList,\n              lastMsgId:\n                resMsgLen === 0 ? currLastMsgId : resMsgList[resMsgLen - 1].id\n            });\n          })\n          .catch(err => {\n            console.log(\"消息组件获取消息失败 => \", err.response.data);\n            this.setState({\n              logged: false\n            });\n            switch (err.response.status) {\n              case 401:\n                alert(\"登录状态失效，请重新登录！\");\n                this.props.history.push(\"/signin\");\n                clearTimeout(this.state.timerId);\n                break;\n            }\n          });\n      }\n    }, 700);\n\n    this.setState({\n      timerId: timerId\n    });\n  };\n  componentWillUnmount = () => {\n    clearTimeout(this.state.timerId);\n  };\n  render() {\n    return (\n      <div className=\"msg-container\" ref=\"msg-container\">\n        {this.state.msgList.map((item, index) => (\n          <Message key={index} msgInfo={item}></Message>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default MsgContent;\n","import React from \"react\";\nimport Axios from \"axios\";\nimport Url from \"../../tools/url\";\nimport \"./index.css\";\n\nclass SendBox extends React.Component {\n  constructor(prop) {\n    super(prop);\n    console.log(prop);\n  }\n\n  sendMsg = async () => {\n    let receiverName = this.refs[\"receiverName\"].value;\n    let content = this.refs[\"content\"].value;\n    let userList;\n    let receiverId;\n\n    // 获取结接收者列表\n    let res = await Axios.get(`${Url.UserURL()}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"iris-token\")}`\n      }\n    });\n    if (res.status === 200) {\n      userList = res.data;\n      console.log(\"获取用户列表成功 => \", userList);\n    } else {\n      alert(\"发送失败：获取用户列表失败。\");\n      return;\n    }\n\n    // 获取接受者Id\n    if (receiverName === \"\") {\n      receiverId = 0;\n    } else {\n      userList.forEach(item => {\n        if (item.username === receiverName) {\n          receiverId = item.id;\n          console.log(\"成功获取接受者信息 => \", item);\n        }\n      });\n    }\n\n    // 发送消息\n    if (receiverId === undefined) {\n      alert(`发送失败：无法找到用户名为${receiverName}的接受者`);\n      return;\n    }\n    if (content === \"\") {\n      alert(`发送失败：你不能发送空消息`);\n      return;\n    }\n\n    console.log(`正在给id为=>${receiverId}的用户发送消息=>${content}`);\n    Axios.post(\n      `${Url.MessageURL()}`,\n      {\n        receiverId: receiverId,\n        content: content\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"iris-token\")}`\n        }\n      }\n    )\n      .then(res => {\n        console.log(\"发送成功 => \", res);\n        this.refs[\"content\"].value = \"\";\n      })\n      .catch(err => {\n        console.log(\"发送失败 => \", err.response.data);\n      });\n  };\n\n  logout = () => {\n    console.log(\"正在注销用户\");\n    console.log(\"正在清除localStroage\");\n    localStorage.removeItem(\"iris-token\");\n    console.log(\"清除localStroage成功，完成注销\");\n    window.location.reload();\n  };\n  render() {\n    return (\n      <div className=\"sendbox\">\n        <div className=\"sendbox-sendto\">\n          <button className=\"sendbox-sendto-sender\" onClick={this.logout}>\n            {this.props.userInfo.username}\n          </button>\n          <div className=\"sendbox-sendto-charto\">to</div>\n          {/* <div className=\"sendbox-sendto-receiver\">{this.state.receiverName}</div> */}\n          <input\n            className=\"sendbox-sendto-receiver\"\n            placeholder=\"All\"\n            ref=\"receiverName\"\n          />\n        </div>\n        <div className=\"sendbox-msg\">\n          <input\n            className=\"sendbox-msg-input\"\n            placeholder=\"请输入消息内容\"\n            ref=\"content\"\n          ></input>\n          <button className=\"sendbox-msg-button\" onClick={this.sendMsg}>\n            发送\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SendBox;\n","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport \"./index.css\"\nclass Sign extends React.Component{\n  constructor(prop){\n    super(prop)\n  }\n  \n  render(){\n    return(\n      <div className=\"sign\">\n        <Link to=\"/signin\">\n          <button className=\"sign-in\">登录</button>\n        </Link>\n        <Link to=\"/signup\">\n          <button className=\"sign-up\">注册</button>\n          </Link>\n      </div>\n    )\n  }\n}\n\nexport default Sign","import React from \"react\";\nimport Axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport \"./Sign.css\";\nimport Url from \"./tools/url.js\";\n\nclass PageSignIn extends React.Component {\n  constructor(prop) {\n    super(prop);\n  }\n\n  login = () => {\n    let username = this.refs[\"username\"].value;\n    let passwd = this.refs[\"passwd\"].value;\n    console.log(username, passwd);\n    Axios.post(`${Url.LoginURL()}`, {\n      username: username,\n      passwd: passwd\n    })\n      .then(res => {\n        alert(\"登录成功\");\n        console.log(\"登录成功 => \", res);\n\n        localStorage.setItem(\"iris-token\", res.data.token);\n        console.log(\"已经将登录获得的token存入localStorage\");\n        this.props.history.push(\"\");\n      })\n      .catch(err => {\n        alert(`登录失败${JSON.stringify(err.response.data)}`);\n        console.log(\"登录失败 => \", err.response.data);\n      });\n  };\n  render() {\n    return (\n      <div className=\"page-sign-in\">\n        <div className=\"page-header\">登录</div>\n        <div className=\"page-content\">\n          <div className=\"input-title\">用户名</div>\n          <input className=\"input-area\" ref=\"username\"></input>\n          <div className=\"input-title\">密码</div>\n          <input className=\"input-area\" ref=\"passwd\" type=\"password\"></input>\n          <div className=\"input-button\">\n            <button className=\"input-button-ok\" onClick={this.login}>\n              登录\n            </button>\n            <Link to=\"/\">\n              <button className=\"input-button-return\">返回</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PageSignIn;\n","import React from \"react\";\nimport Axios from \"axios\";\nimport Url from \"./tools/url\";\nimport { Link } from \"react-router-dom\";\nimport \"./Sign.css\";\n\nclass PageSignUp extends React.Component {\n  constructor(prop) {\n    super(prop);\n  }\n  register = () => {\n    let username = this.refs[\"username\"].value;\n    let passwd = this.refs[\"passwd\"].value;\n    let gender = this.refs[\"gender\"].value;\n    let age = this.refs[\"age\"].value;\n    let interest = this.refs[\"interest\"].value;\n    Axios.post(`${Url.UserURL()}`, {\n      username: username,\n      passwd: passwd,\n      gender: gender,\n      age: age,\n      interest: interest\n    })\n      .then(res => {\n        alert(\"注册成功\");\n        console.log(\"注册成功 => \", res);\n        this.props.history.push(\"/signin\");\n      })\n      .catch(err => {\n        alert(`注册失败${JSON.stringify(err.response.data)}`);\n        console.log(\"注册失败 => \", err.response.data);\n      });\n  };\n  render() {\n    return (\n      <div className=\"page-sign-up\">\n        <div className=\"page-header\">注册</div>\n        <div className=\"page-content\">\n          <div className=\"input-title\">用户名</div>\n          <input className=\"input-area\" ref=\"username\"></input>\n          <div className=\"input-title\">密码</div>\n          <input className=\"input-area\" ref=\"passwd\"></input>\n          <div className=\"input-title\">性别</div>\n          <select className=\"input-area\" ref=\"gender\">\n            <option value=\"1\">女</option>\n            <option value=\"2\">男</option>\n          </select>\n          <div className=\"input-title\">年龄</div>\n          <input className=\"input-area\" ref=\"age\"></input>\n          <div className=\"input-title\">兴趣爱好</div>\n          <input className=\"input-area\" ref=\"interest\"></input>\n          <div className=\"input-button\">\n            <button className=\"input-button-ok\" onClick={this.register}>\n              注册\n            </button>\n            <Link to=\"/\">\n              <button className=\"input-button-return\">返回</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PageSignUp;\n","import React from \"react\";\nimport Axios from \"axios\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MsgContent from \"./component/MsgContent\";\nimport SendBox from \"./component/SendBox\";\nimport Sign from \"./component/SigninOrSignup\";\nimport PageSignIn from \"./SignIn\";\nimport PageSignUp from \"./SignUp\";\nimport Url from \"./tools/url.js\";\nlet isLogin = false;\nclass App extends React.Component {\n  constructor(prop) {\n    super(prop);\n    console.log(this.props);\n    this.state = {\n      userInfo: null,\n      logged: false,\n      msgList: [],\n      timerId: 0\n    };\n    this.isLogged();\n  }\n\n  isLogged = () => {\n    Axios.get(`${Url.TokenInfoURL()}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"iris-token\")}`\n      }\n    })\n      .then(res => {\n        console.log(\"验证登录token成功 =>\", res);\n        this.setState({\n          logged: true,\n          userInfo: res.data\n        });\n        this.refs[\"MsgContent\"].setState({ logged: true });\n      })\n      .catch(err => {\n        console.log(\"验证登录token失败 => \", err.response.data);\n        this.refs[\"MsgContent\"].setState({ logged: false });\n        clearTimeout(this.state.timerId);\n      });\n  };\n  componentWillMount = () => {\n    console.log(\"componentWillMount\");\n    let timerId = setInterval(() => {\n      // Axios.get(`${Url.TokenInfoURL()}`, {\n      //   headers: {\n      //     Authorization: `Bearer ${localStorage.getItem(\"iris-token\")}`\n      //   }\n      // })\n      //   .then(res => {\n      //     console.log(\"验证登录token成功 =>\", res);\n      //     this.setState({\n      //       logged: true,\n      //       userInfo: res.data\n      //     });\n      //   })\n      //   .catch(err => {\n      //     console.log(\"验证登录token失败 => \", err.response.data);\n      //     this.refs[\"MsgContent\"].setState({ logged: false });\n      //     clearTimeout(timerId);\n      //   });\n      this.isLogged();\n    }, 5000);\n    this.setState({\n      timerId: timerId\n    });\n  };\n  componentWillUnmount = () => {\n    clearTimeout(this.state.timerId);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"app-header\">在线聊天室</div>\n        <div className=\"app-content\">\n          <MsgContent\n            history={this.props.history}\n            ref=\"MsgContent\"\n          ></MsgContent>\n        </div>\n        <div className=\"app-bottom\">\n          {this.state.logged ? (\n            <SendBox userInfo={this.state.userInfo} ref=\"SendBox\"></SendBox>\n          ) : (\n            <Sign></Sign>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\n\nimport App from './App';\nimport PageSignIn from './SignIn';\nimport PageSignUp from './SignUp';\n\nconst Routes=()=>(\n  <Router>\n    <Switch>\n        <Route path='/signin' component={PageSignIn}/>\n        <Route path='/signup' component={PageSignUp}/>\n        <Route path='/' component={App}/>\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(Routes(), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}